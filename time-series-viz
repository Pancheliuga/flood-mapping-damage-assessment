// Define the regional bounds of animation frames.
var aoi = ee.Geometry.Polygon(
  [[[30.243816826510315, 50.760229197246105],
    [30.243816826510315, 50.67947924476298],
    [30.46371505038727, 50.67947924476298],
    [30.46371505038727, 50.760229197246105]]],
  null, false
);

//Set start and end dates of a period BEFORE & AFTER the flood
var startDate= '2022-02-15';
var endDate='2022-03-25';

// Fetch a Sentinel-1 GRD collectioin by predefined parameters
var collection= ee.ImageCollection('COPERNICUS/S1_GRD')
  .filter(ee.Filter.eq('instrumentMode','IW'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING')) 
  .filter(ee.Filter.eq('resolution_meters',10))
  .filter(ee.Filter.date(startDate, endDate))
  .filter(ee.Filter.bounds(aoi))
  .select(['VV', 'VH']);
  
// Define RGB visualization parameters.
var visParams = { 
    min:[-25, -25, 0],
    max:[0, 0, 2] 
};

// Create RGB visualization images for use as animation frames.
var rgbVis = collection.map(function(img) {
  var ratioBand = img.select('VV').divide(img.select('VH')).rename('VV/VH');
  return img.addBands(ratioBand).visualize(visParams).clip(aoi);
});

// Define GIF visualization arguments.
var gifParams = {
  'region': aoi,
  'dimensions': 600,
  'crs': 'EPSG:3857',
  'framesPerSecond': 1,
  'format': 'gif'
};

// Print the GIF URL to the console.
print(rgbVis.getVideoThumbURL(gifParams));

// Render the GIF animation in the console.
print(ui.Thumbnail(rgbVis, gifParams));
